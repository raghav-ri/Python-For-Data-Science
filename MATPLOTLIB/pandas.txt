Pandas is a powerful Python library for data manipulation and analysis. It provides a wide range of methods and functions to work with data efficiently. Below is a categorized list of Pandas methods and functions, along with explanations and examples:

---

### **1. Data Creation**
These methods are used to create Pandas objects like DataFrames and Series.

- **`pd.DataFrame()`**: Creates a DataFrame from a dictionary, list, or array.
  ```python
  import pandas as pd
  data = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}
  df = pd.DataFrame(data)
  print(df)
  # Output:
  #     Name  Age
  # 0  Alice   25
  # 1    Bob   30
  ```

- **`pd.Series()`**: Creates a Series (1D array-like object).
  ```python
  s = pd.Series([1, 2, 3], index=['a', 'b', 'c'])
  print(s)
  # Output:
  # a    1
  # b    2
  # c    3
  ```

- **`pd.read_csv()`**: Reads a CSV file into a DataFrame.
  ```python
  df = pd.read_csv('data.csv')
  ```

- **`pd.read_excel()`**: Reads an Excel file into a DataFrame.
  ```python
  df = pd.read_excel('data.xlsx')
  ```

- **`pd.read_json()`**: Reads a JSON file into a DataFrame.
  ```python
  df = pd.read_json('data.json')
  ```

---

### **2. Data Inspection**
These methods help inspect the structure and content of a DataFrame.

- **`df.head()`**: Displays the first few rows of the DataFrame.
  ```python
  print(df.head(3))  # First 3 rows
  ```

- **`df.tail()`**: Displays the last few rows of the DataFrame.
  ```python
  print(df.tail(3))  # Last 3 rows
  ```

- **`df.info()`**: Provides a summary of the DataFrame, including data types and non-null counts.
  ```python
  print(df.info())
  ```

- **`df.describe()`**: Provides summary statistics for numerical columns.
  ```python
  print(df.describe())
  ```

- **`df.shape`**: Returns the dimensions of the DataFrame (rows, columns).
  ```python
  print(df.shape)  # (rows, columns)
  ```

- **`df.columns`**: Returns the column names.
  ```python
  print(df.columns)
  ```

- **`df.dtypes`**: Returns the data types of each column.
  ```python
  print(df.dtypes)
  ```

---

### **3. Data Selection**
These methods are used to select specific rows, columns, or values.

- **`df['column_name']`**: Selects a single column.
  ```python
  print(df['Name'])
  ```

- **`df[['col1', 'col2']]`**: Selects multiple columns.
  ```python
  print(df[['Name', 'Age']])
  ```

- **`df.loc[]`**: Selects rows and columns by labels.
  ```python
  print(df.loc[0, 'Name'])  # Row 0, column 'Name'
  ```

- **`df.iloc[]`**: Selects rows and columns by integer positions.
  ```python
  print(df.iloc[0, 1])  # Row 0, column 1
  ```

- **`df.at[]`**: Accesses a single value by label.
  ```python
  print(df.at[0, 'Name'])
  ```

- **`df.iat[]`**: Accesses a single value by position.
  ```python
  print(df.iat[0, 1])
  ```

---

### **4. Data Cleaning**
These methods help clean and preprocess data.

- **`df.dropna()`**: Removes rows or columns with missing values.
  ```python
  df_cleaned = df.dropna()
  ```

- **`df.fillna()`**: Fills missing values with a specified value.
  ```python
  df_filled = df.fillna(0)
  ```

- **`df.isna()`**: Checks for missing values.
  ```python
  print(df.isna())
  ```

- **`df.drop()`**: Drops specified rows or columns.
  ```python
  df_dropped = df.drop('Age', axis=1)  # Drop column 'Age'
  ```

- **`df.rename()`**: Renames columns or rows.
  ```python
  df_renamed = df.rename(columns={'Name': 'Full Name'})
  ```

- **`df.duplicated()`**: Checks for duplicate rows.
  ```python
  print(df.duplicated())
  ```

- **`df.drop_duplicates()`**: Removes duplicate rows.
  ```python
  df_unique = df.drop_duplicates()
  ```

---

### **5. Data Transformation**
These methods modify or transform data.

- **`df.sort_values()`**: Sorts the DataFrame by a column.
  ```python
  df_sorted = df.sort_values('Age')
  ```

- **`df.apply()`**: Applies a function to rows or columns.
  ```python
  df['Age'] = df['Age'].apply(lambda x: x + 1)
  ```

- **`df.groupby()`**: Groups data and performs aggregate operations.
  ```python
  grouped = df.groupby('Name').sum()
  ```

- **`df.pivot_table()`**: Creates a pivot table.
  ```python
  pivot = df.pivot_table(values='Age', index='Name', aggfunc='mean')
  ```

- **`df.melt()`**: Unpivots a DataFrame from wide to long format.
  ```python
  melted = df.melt(id_vars=['Name'], value_vars=['Age'])
  ```

---

### **6. Data Aggregation**
These methods compute summary statistics.

- **`df.sum()`**: Computes the sum of values.
  ```python
  print(df['Age'].sum())
  ```

- **`df.mean()`**: Computes the mean of values.
  ```python
  print(df['Age'].mean())
  ```

- **`df.median()`**: Computes the median of values.
  ```python
  print(df['Age'].median())
  ```

- **`df.min()` / `df.max()`**: Finds the minimum/maximum values.
  ```python
  print(df['Age'].min())
  print(df['Age'].max())
  ```

- **`df.count()`**: Counts non-null values.
  ```python
  print(df['Age'].count())
  ```

---

### **7. Data Export**
These methods save DataFrames to files.

- **`df.to_csv()`**: Saves the DataFrame to a CSV file.
  ```python
  df.to_csv('output.csv', index=False)
  ```

- **`df.to_excel()`**: Saves the DataFrame to an Excel file.
  ```python
  df.to_excel('output.xlsx', index=False)
  ```

- **`df.to_json()`**: Saves the DataFrame to a JSON file.
  ```python
  df.to_json('output.json')
  ```

---

### **8. Time Series**
These methods handle time-series data.

- **`pd.to_datetime()`**: Converts a column to datetime format.
  ```python
  df['Date'] = pd.to_datetime(df['Date'])
  ```

- **`df.resample()`**: Resamples time-series data.
  ```python
  resampled = df.resample('M').mean()  # Monthly average
  ```

---

### **9. Merging and Joining**
These methods combine multiple DataFrames.

- **`pd.concat()`**: Concatenates DataFrames along rows or columns.
  ```python
  combined = pd.concat([df1, df2], axis=0)
  ```

- **`pd.merge()`**: Merges DataFrames based on a common column.
  ```python
  merged = pd.merge(df1, df2, on='ID')
  ```

- **`df.join()`**: Joins DataFrames on their indices.
  ```python
  joined = df1.join(df2)
  ```

---

This is a comprehensive overview of Pandas methods and functions. Let me know if you'd like examples for specific methods!



Hereâ€™s a step-by-step explanation of the requested operations in Pandas:

---

### **1. Using `fillna()` to Replace Null Values with Column Mean**
The `fillna()` method is used to replace missing (`NaN`) values in a DataFrame. To replace null values with the mean of the column:

#### Example:
```python
import pandas as pd
import numpy as np

# Sample DataFrame
data = {'Country': ['India', 'USA', 'UK', 'Germany', 'France'],
        'GDP': [2.87, 21.43, np.nan, 3.85, np.nan]}
df = pd.DataFrame(data)

# Replace null values in the 'GDP' column with the column mean
df['GDP'] = df['GDP'].fillna(df['GDP'].mean())

print(df)
# Output:
#    Country     GDP
# 0    India   2.870
# 1      USA  21.430
# 2       UK   9.383  # Mean value
# 3  Germany   3.850
# 4   France   9.383  # Mean value
```

---

### **2. Counting and Checking Null Values**
To count and check for null values in a DataFrame, use the following methods:

#### Example:
```python
# Check for null values in the DataFrame
print(df.isna())
# Output:
#    Country    GDP
# 0    False  False
# 1    False  False
# 2    False  False
# 3    False  False
# 4    False  False

# Count the total number of null values in each column
print(df.isna().sum())
# Output:
# Country    0
# GDP        0
```

---

### **3. Using `df[df[]]` for Filtering**
The `df[df[]]` syntax is used to filter rows in a DataFrame based on a condition.

#### Example:
```python
# Filter rows where GDP is greater than 10
high_gdp_countries = df[df['GDP'] > 10]
print(high_gdp_countries)
# Output:
#   Country     GDP
# 1     USA  21.430
```

#### Explanation:
- `df['GDP'] > 10` creates a boolean mask.
- `df[df['GDP'] > 10]` filters rows where the condition is `True`.

---

### **4. Changing Data Types**
You can change the data type of a column using the `astype()` method.

#### Example:
```python
# Change the data type of the 'GDP' column to integer
df['GDP'] = df['GDP'].astype(int)
print(df.dtypes)
# Output:
# Country    object
# GDP         int32
# dtype: object
```

---

### **5. Displaying Top 10 Performing Countries**
To display the top 10 performing countries based on a specific column (e.g., GDP), use the `nlargest()` method.

#### Example:
```python
# Sample DataFrame with more countries
data = {'Country': ['India', 'USA', 'UK', 'Germany', 'France', 'China', 'Japan', 'Canada', 'Australia', 'Brazil'],
        'GDP': [2.87, 21.43, 2.83, 3.85, 2.78, 14.34, 5.08, 1.84, 1.39, 1.84]}
df = pd.DataFrame(data)

# Get the top 10 countries by GDP
top_10_countries = df.nlargest(10, 'GDP')
print(top_10_countries)
# Output:
#     Country    GDP
# 1      USA  21.43
# 5    China  14.34
# 6    Japan   5.08
# 3  Germany   3.85
# 0    India   2.87
# 2       UK   2.83
# 4   France   2.78
# 7   Canada   1.84
# 9   Brazil   1.84
# 8 Australia   1.39
```

---

### **Summary of Concepts**
1. **`fillna()`**: Replace missing values with a specific value (e.g., column mean).
2. **`isna()` and `isna().sum()`**: Check and count null values.
3. **`df[df[]]`**: Filter rows based on conditions.
4. **`astype()`**: Change the data type of a column.
5. **`nlargest()`**: Retrieve the top N rows based on a column.

Let me know if you need further clarification or additional examples!

top10_largest=df.nlargest(10,'GDP')